name: Move Issue to Dev

on:
  issue_comment:
    types: [created]

permissions:
  contents: read
  issues: write

jobs:
  move-to-dev:
    runs-on: ubuntu-latest

    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
      GH_TOKEN: ${{ secrets.GH_PAT }}

    steps:
    - name: Exit if comment is not exactly a valid command
      if: |
        github.event.comment.body != '/move-to-dev-bug' &&
        github.event.comment.body != '/move-to-dev-feature'
      run: |
        echo "Not a valid move-to-dev command. Exiting."
        exit 0

    - name: Determine template file
      id: config
      run: |
        COMMENT="${{ github.event.comment.body }}"
        if [[ "$COMMENT" == "/move-to-dev-bug" ]]; then
          echo "template_file=bug_report.md" >> $GITHUB_OUTPUT
        elif [[ "$COMMENT" == "/move-to-dev-feature" ]]; then
          echo "template_file=feature_request.md" >> $GITHUB_OUTPUT
        fi

    - name: Fetch issue title and body
      id: design_issue
      run: |
        ISSUE_NUMBER=${{ github.event.issue.number }}
        TITLE=$(gh issue view "$ISSUE_NUMBER" -R devamadala/design --json title -q '.title')
        BODY=$(gh issue view "$ISSUE_NUMBER" -R devamadala/design --json body -q '.body')
        {
          echo "title<<EOF"
          echo "$TITLE"
          echo "EOF"
          echo "body<<EOF"
          echo "$BODY"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Fetch all comments on Design issue
      id: all_comments
      run: |
        ISSUE_NUMBER=${{ github.event.issue.number }}
        COMMENTS=$(gh issue view "$ISSUE_NUMBER" -R devamadala/design --json comments -q '.comments[].body' | jq -Rs 'gsub("\\n"; "\n")')
        {
          echo "comments<<EOF"
          echo "$COMMENTS"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Fetch template from Dev repo
      id: dev_template
      run: |
        curl -s "https://raw.githubusercontent.com/devamadala/dev/main/.github/ISSUE_TEMPLATE/${{ steps.config.outputs.template_file }}" -o template.md
        echo "template=$(cat template.md | base64 -w 0)" >> $GITHUB_OUTPUT

    - name: Format with Gemini
      id: gemini
      env:
        COMMENTS: ${{ steps.all_comments.outputs.comments }}
        TEMPLATE: ${{ steps.dev_template.outputs.template }}
        TITLE: ${{ steps.design_issue.outputs.title }}
        BODY: ${{ steps.design_issue.outputs.body }}
      run: |
        # Decode and remove YAML front matter from the template
        TEMPLATE=$(echo "$TEMPLATE" | base64 --decode | awk 'c==2; /^---/ {c++}')
        echo "Decoded TEMPLATE (YAML front matter removed):"
        echo "$TEMPLATE"
        echo "Length of TEMPLATE: ${#TEMPLATE}"
        echo "COMMENTS RAW: $COMMENTS"
        echo "TITLE: $TITLE"
        echo "BODY: $BODY"

        PROMPT="You are a helpful assistant formatting GitHub issues.\n\nUse this issue template :\n --- \n$TEMPLATE\n --- \n\nOriginal issue from the Design repo:\nTitle: $TITLE\n\nBody:\n$BODY\n\nHere are all the comments on the issue:\n$COMMENTS\n\nFormat a new issue for the Dev repo using the template above, incorporating any useful details from the comments. \n\n Do not include any other text in your response other than the formatted issue based on the template."
        echo "PROMPT:"
        echo "$PROMPT"
        echo "Length of PROMPT: ${#PROMPT}"
        

        REQUEST_PAYLOAD=$(jq -n --arg prompt "$PROMPT" '{contents: [{parts: [{text: $prompt}]}]}')
        echo "REQUEST_PAYLOAD:"
        echo "$REQUEST_PAYLOAD"
        echo "Length of REQUEST_PAYLOAD: ${#REQUEST_PAYLOAD}"

        HTTP_RESPONSE=$(curl -s -w "HTTPSTATUS:%{http_code}" -X POST "https://generativelanguage.googleapis.com/v1beta/models/gemini-2.5-flash:generateContent" \
          -H "x-goog-api-key: $GEMINI_API_KEY" \
          -H "Content-Type: application/json" \
          -d "$REQUEST_PAYLOAD")

        HTTP_BODY=$(echo "$HTTP_RESPONSE" | sed -e 's/HTTPSTATUS:.*//g')
        HTTP_STATUS=$(echo "$HTTP_RESPONSE" | tr -d '\n' | sed -e 's/.*HTTPSTATUS://')

        echo "Gemini API HTTP status: $HTTP_STATUS"
        echo "Gemini API response: $HTTP_BODY"

        # Check if the response is valid JSON and contains the expected field
        if echo "$HTTP_BODY" | jq -e '.candidates[0].content.parts[0].text' > /dev/null 2>&1; then
          FORMATTED_BODY=$(echo "$HTTP_BODY" | jq -r '.candidates[0].content.parts[0].text')
        else
          echo "Gemini API call failed or returned invalid JSON."
          echo "$HTTP_BODY"
          exit 1
        fi

        {
          echo "body<<EOF"
          echo "$FORMATTED_BODY"
          echo "EOF"
        } >> $GITHUB_OUTPUT

    - name: Create issue in Dev repo
      id: create_dev_issue
      env:
        ISSUE_BODY: ${{ steps.gemini.outputs.body }}
        TITLE: ${{ steps.design_issue.outputs.title }}
      run: |
        echo "$ISSUE_BODY" > issue_body.txt
        OUTPUT=$(gh issue create \
          -R devamadala/dev \
          -t "$TITLE" \
          -F issue_body.txt)
        echo "$OUTPUT"
        ISSUE_URL=$(echo "$OUTPUT" | grep -Eo 'https://github.com/[^ ]+/issues/[0-9]+')
        {
          echo "url<<EOF"
          echo "$ISSUE_URL"
          echo "EOF"
        } >> $GITHUB_OUTPUT
